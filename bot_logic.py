import json
from aiogram.filters import BaseFilter
from aiogram.filters.state import State, StatesGroup
import os
from settings import *
from lexic import lex
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram import Bot
from config import Config, load_config


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
config: Config = load_config()
TKN: str = config.tg_bot.token
bot_func: Bot = Bot(TKN)


# –§–∏–ª—å—Ç—Ä, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –¥–æ—Å—Ç—É–ø —é–∑–µ—Ä–∞
class Access(BaseFilter):
    def __init__(self, access: list[str]) -> None:
        # –í –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
        self.access = access

    async def __call__(self, message: Message) -> bool:
        user_id_str = str(message.from_user.id)
        return user_id_str in self.access


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class FSM(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —é–∑–µ—Ä–æ–º
    policy = State()            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å policy
    cancelation = State()       # –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    ready_for_next = State()    #
    done_a_task = State()       #
    all_accepted = State()      # –≤—Å–µ –ø—Ä–∏–Ω—è—Ç–æ —é–∑–µ—Ä, –∂–¥–µ—Ç –æ–ø–ª–∞—Ç—ã
    password = State()          # –±–æ—Ç –ø—Ä–æ—Å–∏—Ç –ø–∞—Ä–æ–ª—å
    delete = State()            # –ê–¥–º–∏–Ω —Å—Ç–∏—Ä–∞–µ—Ç —á—å—é-—Ç–æ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
    age = State()               # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å –¥–∞–Ω–Ω—ã—Ö
    gender = State()            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å –¥–∞–Ω–Ω—ã—Ö
    fio = State()               # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å –¥–∞–Ω–Ω—ã—Ö
    country = State()           # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å –¥–∞–Ω–Ω—ã—Ö
    polling = State()           # —Ç–µ—Å—Ç –¥–ª—è —é–∑–µ—Ä–∞


# –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö item –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π json file –ø–æ –∫–ª—é—á—É key
async def log(file, key, item):
    with open(file, encoding='utf-8') as f:
        data = json.load(f)
    data.setdefault(str(key), []).append(item)
    with open(file, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

    log_text = str(key)+' '+str(item)
    print(log_text)
    # –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤ —Ç–≥-–∫–∞–Ω–∞–ª
    try:
        await bot_func.send_message(chat_id=log_channel_id, text=log_text) if log_channel_id else None
    except Exception as e:
        print('channel error', e)


# –¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π –ø–æ –∞–π–¥–∏ —é–∑–µ—Ä–∞
async def get_status(user_id):
    with open(baza_task, 'r') as f:
        data = json.load(f)
    non = rev = rej = acc = 0
    try:
        info = data[user_id]
        for task in info:
            # print(task)
            if info[task][0] == 'status':
                non += 1
            elif info[task][0] == 'review':
                rev += 1
            elif info[task][0] == 'reject':
                rej += 1
            elif info[task][0] == 'accept':
                acc += 1
    except KeyError:
        non = total_tasks
    return f'‚úÖ –ü—Ä–∏–Ω—è—Ç–æ - {acc}\nüîÅ –ù–∞–¥–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å - {rej}\n‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ - {rev}\nüí™ –û—Å—Ç–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å - {non}'


# –∞–π–¥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
def id_from_text(text: str) -> str:
    user_id = ''
    for word in text.split():
        if word.lower().startswith('id'):
            for symbol in word:
                if symbol.isnumeric():
                    user_id += symbol
            break
    return user_id


# —Å–æ–∑–¥–∞—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∑–∞–¥–∞–Ω–∏–π
def create_account(task_amount: int) -> dict:
    # –ø—Ä–∏–º–µ—Ä = {"file01": ['status', 'file'], }
    account = {f'file{num:0>2}': ['status', 'file'] for num in range(1, task_amount+1)}
    return account


# –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –≤—ã–¥–∞—Ç—å –Ω–æ–º–µ—Ä —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–ø—Ä file04
def find_next_task(user: str):
    # —Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞–Ω–∏–π —é–∑–µ—Ä–∞
    with open(baza_task, 'r', encoding='utf-8') as f:
        data = json.load(f)
    try:
        tasks = data[user]
    except KeyError:
        return None
    for file_num in tasks:
        if tasks[file_num][0] in ('status', 'reject'):
            # –∑–∞–¥–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
            return file_num
    # –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç:
    return None


# –Ω–∞ –≤—Ö–æ–¥–µ —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ç—Å–≤ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏, –Ω–∞ –≤—ã—Ö–æ–¥–µ task_message
def get_task_message(next_task) -> str:
    task_name = next_task[1] + ' ' + next_task[3]
    link = next_task[2]
    instruct = next_task[4]
    task_message = f'<a href="{link}">{task_name}</a>\n{instruct}'
    return task_message


# –æ—Ç–ø—Ä–∞–≤–∏—Ç—å json
async def send_json(user: str, file: str):
    files = {
        'bd': baza_task,
        'info': baza_info,
        'logs': logs,
    }
    output = list(files.values()) if file == 'all' else [files[file]]
    for i in output:
        await bot_func.send_document(chat_id=user, document=FSInputFile(path=i))
    await log(logs, user, f'adm file request: {file}')


# —Å–æ–∑–¥–∞—Ç—å tsv —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤ –∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, return –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
async def get_tsv(TKN, bot, msg, worker) -> str:
    #  —á—Ç–µ–Ω–∏–µ –ë–î
    with open(baza_task, 'r') as f:
        data = json.load(f)

    urls = {}
    tasks = data[worker]
    for file_num in tasks:
        # –¥–æ–±—ã—Ç—å —Å—Å—ã–ª–∫—É –ø–æ file_id
        try:
            file_id = tasks[file_num][1]
            file_info = await bot.get_file(file_id)
            file_url = file_info.file_path
            url = f'https://api.telegram.org/file/bot{TKN}/{file_url}'
            print(file_num, url)
        except TelegramBadRequest:
            url = 'unavailable'
            print(file_num, 'file unavailable')

        urls.setdefault(file_num, url)

    path = f'sent_{worker}.tsv'
    with open(path, 'w', encoding='UTF-8') as file:
        # tasks_dict = lex['tasks']
        #  —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∞–≤—Ä—è {–∫–æ–¥ –∑–∞–¥–∞–Ω–∏—è: –Ω–∞–∑–≤–∞–Ω–∏–µ}
        with open(tasks_tsv, 'r', encoding='UTF-8') as f:
            tasks_dict = {i.split('\t')[0]: i.split('\t')[3] for i in f.readlines()}
        print(tasks_dict)

        # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        row = ['create_time:', f'{str(msg.date.date())}', f'{msg.date.time()}']
        print('\t'.join(row), file=file)

        #  –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        for i, file_num in enumerate(tasks_dict):
            # print(tasks_dict[file_num])
            try:
                row = (file_num, tasks_dict[file_num], urls[file_num])
            except IndexError:
                break
            print('\t'.join(map(str, row)), file=file)
            # print(row)
    # –≤–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å –∫ —Ç—Å–≤
    return path


# –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å accept –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
async def accept_user(worker) -> None:
    with open(baza_task, 'r', encoding='utf-8') as f:
        data = json.load(f)
    tasks = data[worker]

    # –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã
    for file in tasks:
        tasks[file][0] = 'accept'
        print(tasks[file][0])

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞–Ω–∏–π
    data.setdefault(worker, tasks)
    with open(baza_task, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


# –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç —Ñ–∞–π–ª—ã —é–∑–µ—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
async def send_files(worker, status) -> list | None:
    #  –ª–æ–≥–∏
    await log(logs, worker, f'{status} files requested')
    #  –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    if status not in ('reject', 'accept', 'review'):
        print('wrong adm request')
        return

    # —á—Ç–µ–Ω–∏–µ –±–¥
    with open(baza_task, 'r', encoding='utf-8') as f:
        data = json.load(f)
    tasks = data[worker]

    # —á—Ç–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–∞–π–ª–∞–º
    all_tasks_text = []
    with open(tasks_tsv, 'r', encoding='utf-8') as f:
        next_task = []
        for line in f.readlines():
            all_tasks_text.append(line.split('\t'))

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª–´ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    output = []
    for task in tasks:
        if tasks[task][0] == status:
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç–∞—Ç—É—Å == review
            file_id = tasks[task][1]
            for tasks_text in all_tasks_text:
                if tasks_text[0] == task:
                    next_task = tasks_text
            task_message = get_task_message(next_task)
            # print(task_message)
            # text = lex['tasks'][task].split('\n')[0]
            print('adm', task)
            output.append((file_id, task_message,))

    return output
